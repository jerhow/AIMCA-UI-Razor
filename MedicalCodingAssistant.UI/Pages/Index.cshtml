@page
@model MedicalCodingAssistant.UI.Pages.IndexModel
@{
    ViewData["Title"] = "API Client";
}

<div class="row">
    <div class="col-md-10 offset-md-1">
        <div class="col-lg-10 col-xl-8"> 
            <div>
                <h1 class="display-6">ICD-10-CM Code Search</h1>
            </div>
            <form method="post" id="search-form">
                @* Anti-forgery token - important for security *@
                @Html.AntiForgeryToken()

                <div class="mb-3">
                    <label asp-for="Query" class="form-label">Diagnosis or clinical description:</label>
                    <input asp-for="Query" type="text" class="form-control" placeholder="Enter search query" required />
                    <span asp-validation-for="Query" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="MaxSqlResults" class="form-label">Max SQL Results:</label>
                    <input asp-for="MaxSqlResults" type="number" min="1" class="form-control" required />
                    <span asp-validation-for="MaxSqlResults" class="text-danger"></span>
                </div>
                <div class="d-grid">
                    <button type="submit" class="btn btn-primary" id="search-button">
                        <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true" id="search-spinner"></span>
                        <span id="search-button-text">Search API</span>
                    </button>
                </div>
            </form>
        </div>

        @* Display Error Messages *@
        @if (!string.IsNullOrEmpty(Model.ErrorMessage))
        {
            <div class="alert alert-danger" role="alert">
                <strong>Error:</strong> @Model.ErrorMessage
            </div>
        }

        @* Display API Results *@
        @if (Model.ApiResult != null)
        {
            <hr />
            
            <div class="mt-4">
                <h3>Search Results</h3>
                <p>
                    <strong>Used Free Text Fallback:</strong> @Model.ApiResult.UsedFreeTextFallback <br />
                    <strong>Total SQL Result Count:</strong> @Model.ApiResult.TotalSqlResultCount <br />
                    <strong>OpenAI Version:</strong> @Model.ApiResult.AiVersion <br />
                    <strong>OpenAI Model:</strong> @Model.ApiResult.AiModel <br />
                    <strong>OpenAI Temperature:</strong> @Model.ApiResult.AiTemperature
                </p>

                @if (Model.ApiResult.SearchResults != null && Model.ApiResult.SearchResults.Any())
                {
                    <table class="table table-striped table-bordered">
                        <thead>
                            <tr>
                                <th>Rank</th>
                                <th>Code</th>
                                <th>Description</th>
                                <th>Source</th>
                                <th>Confidence</th>
                                <th>Reason</th>
                                <th>Is Valid</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.ApiResult.SearchResults.OrderBy(r => r.Rank))
                            {
                                <tr>
                                    <td>@item.Rank</td>
                                    <td>@item.Code</td>
                                    <td>@item.Description</td>
                                    <td>@item.Source.ToUpperInvariant()</td>
                                    <td>@item.Confidence</td>
                                    <td>@item.Reason</td>
                                    <td>@item.IsValid</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <p>No search results returned.</p>
                }
            </div>
        }

    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('search-form');
            const button = document.getElementById('search-button');
            const spinner = document.getElementById('search-spinner');
            const buttonText = document.getElementById('search-button-text');

            if (form && button && spinner) {
                form.addEventListener('submit', function() {
                    // Disable the button
                    button.disabled = true;

                    // Show the spinner
                    spinner.classList.remove('d-none');

                    if (buttonText) {
                         buttonText.innerText = 'Searching...'; // Or hide it: buttonText.classList.add('d-none');
                         @* buttonText.classList.add('d-none'); // Alternatively, hide the button text *@
                    }
                });
            }
        });
    </script>
}
